{"ast":null,"code":"const INITIAL_STATE = {\n  midDisplayer: '',\n  argumentos: [],\n  lastInput: ''\n};\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'ADD_OPERATION':\n      switch (state.lastInput + action.newOperator) {\n        case '--':\n        case 'x-':\n        case '/-':\n        case '+-':\n          return {\n            argumentos: [...state.argumentos, state.midDisplayer + action.newOperator],\n            midDisplayer: action.newOperator,\n            lastInput: state.midDisplayer\n          };\n        //                         case '-+':\n        //                         case '-/':\n        //                         case '-x':\n        default:\n          return {\n            argumentos: () => function () {\n              state.argumentos.pop();\n              return [...state.argumentos, action.newOperator];\n            },\n            midDisplayer: action.newOperator,\n            lastInput: state.midDisplayer\n          };\n        //                         default:\n        //                             return {}\n      }\n\n    case 'ADD_NUMBER':\n      return {\n        topDisplayer: state.topDisplayer + action.newNumber,\n        midDisplayer: state.midDisplayer + action.newNumber,\n        lastInput: action.newNumber\n      };\n    case 'SHOW_RESULT':\n      return {\n        ...state,\n        topDisplayer: state.topDisplayer + action.result,\n        midDisplayer: action.result\n      };\n    default:\n      return state;\n  }\n}\n;\nconst OperationFns = {\n  mapStateToProps: function (state) {\n    return {\n      lastInput: state.lastInput\n    };\n  },\n  mapDispatchToProps: function (dispatch) {\n    return {\n      addOperator: val => dispatch({\n        type: 'ADD_OPERATION',\n        newOperator: val\n      })\n    };\n  }\n};\nconst ButtonsFns = {\n  mapDispatchToProps: function (dispatch) {\n    return {\n      addNumber: val => dispatch({\n        type: 'ADD_NUMBER',\n        newNumber: val\n      })\n    };\n  }\n};\nconst EqualFns = {\n  mapStateToProps: function (state) {\n    return {\n      argumentos: state.argumentos,\n      midDisplayer: state.midDisplayer\n    };\n  },\n  mapDispatchToProps: function (dispatch) {\n    return {\n      dispatchResult: resultado => dispatch({\n        type: 'SHOW_RESULT',\n        result: resultado\n      })\n    };\n  }\n};\nconst DisplayFns = {\n  mapStateToProps: function (state) {\n    return {\n      topDisplayer: state.topDisplayer,\n      midDisplayer: state.midDisplayer\n    };\n  }\n};\nexport { reducer, OperationFns, ButtonsFns, EqualFns, DisplayFns };","map":{"version":3,"names":["INITIAL_STATE","midDisplayer","argumentos","lastInput","reducer","state","action","type","newOperator","pop","topDisplayer","newNumber","result","OperationFns","mapStateToProps","mapDispatchToProps","dispatch","addOperator","val","ButtonsFns","addNumber","EqualFns","dispatchResult","resultado","DisplayFns"],"sources":["/home/rockstu/Documents/FCC/Front End Development/calculator/src/Components/ReduxFunctions.js"],"sourcesContent":["const INITIAL_STATE = {\n    midDisplayer: '',\n    argumentos: [], \n    lastInput: ''\n};\n\nfunction reducer(state = INITIAL_STATE, action){\n        switch(action.type){\n        case 'ADD_OPERATION':\n            switch(state.lastInput+action.newOperator){\n                        case '--':\n                        case 'x-':\n                        case '/-':\n                        case '+-':\n                            return {argumentos : [...state.argumentos, state.midDisplayer+action.newOperator], midDisplayer: action.newOperator,lastInput: state.midDisplayer}\n//                         case '-+':\n//                         case '-/':\n//                         case '-x':\n                        default:\n                            return {argumentos: () => function(){state.argumentos.pop();return [...state.argumentos, action.newOperator]}, midDisplayer: action.newOperator, lastInput: state.midDisplayer }\n//                         default:\n//                             return {}\n                            }\n        case 'ADD_NUMBER':\n            return {topDisplayer: state.topDisplayer + action.newNumber, midDisplayer: state.midDisplayer + action.newNumber, lastInput: action.newNumber}\n        case 'SHOW_RESULT': \n            return {...state, topDisplayer: state.topDisplayer + action.result, midDisplayer: action.result}\n        default:\n            return state\n    }\n};\n\n\nconst OperationFns = {\n    mapStateToProps: function(state){\n        return {\n            lastInput: state.lastInput\n        }\n    },\n    \n    mapDispatchToProps: function(dispatch){\n        return {\n            addOperator: (val) => dispatch({type: 'ADD_OPERATION', newOperator: val})\n        }\n    }\n    \n}\n\nconst ButtonsFns = {\n    mapDispatchToProps: function(dispatch){\n        return {\n            addNumber: (val) => dispatch({type: 'ADD_NUMBER', newNumber: val})\n        }\n    }\n    \n}\n\n\nconst EqualFns = {\n    mapStateToProps: function(state){\n        return {\n            argumentos: state.argumentos,\n            midDisplayer: state.midDisplayer\n        }\n    },\n    mapDispatchToProps: function(dispatch){\n        return {\n            dispatchResult: (resultado) => dispatch({type: 'SHOW_RESULT', result: resultado})\n        }\n    }\n    \n}\n\nconst DisplayFns = {\n    mapStateToProps: function(state){\n        return {\n            topDisplayer: state.topDisplayer,\n            midDisplayer: state.midDisplayer\n        }\n    }\n}\n\n\n\nexport { reducer, OperationFns, ButtonsFns, EqualFns, DisplayFns };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}